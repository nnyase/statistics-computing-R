ggplot(data=pima, mapping = aes(x = glc, y = age)) +
geom_point(aes(color = class,group = bmi, size = 2)) +
ggtitle("Plot showing relationship of GLC and age highlighed by if subject has diabetes.") +
xlab("Age(years)") + ylab("GLC")
for (index in 1:ncol(pima)){
boxplot(formula = pima[index]  ~ pima$class,
col = "lightgray",
notch = TRUE)
}
for (index in 1:ncol(pima)){
boxplot(formula = unlist(pima[index])  ~ pima$class,
col = "lightgray",
notch = TRUE)
}
print(pima[1])
print(col(pima[1]))
print(colnames(pima[1]))
boxplot(formula = unlist(pima[index])  ~ pima$class,
col = "lightgray",
xlab = format(colnames(pima[1]))
notch = TRUE)
for (index in 1:ncol(pima)){
boxplot(formula = unlist(pima[index])  ~ pima$class,
col = "lightgray",
xlab = format(colnames(pima[1]))
notch = TRUE)
for (index in 1:ncol(pima)){
boxplot(formula = unlist(pima[index])  ~ pima$class,
col = "lightgray",
xlab = format(colnames(pima[1])),
notch = TRUE)
}
print(colnames(pima[1]))
for (index in 1:ncol(pima)){
boxplot(formula = unlist(pima[index])  ~ pima$class,
col = "lightgray",
xlab = paste0("",colnames(pima[1])))
}
print(colnames(pima[1]))
for (index in 1:ncol(pima)){
boxplot(formula = unlist(pima[index])  ~ pima$class,
col = "lightgray",
ylab = paste0("",colnames(pima[1])))
}
print(colnames(pima[1]))
for (index in 1:ncol(pima)){
boxplot(formula = unlist(pima[index])  ~ pima$class,
col = "lightgray",
ylab = paste0("",colnames(pima[1]))
xlab= 'Class',
for (index in 1:ncol(pima)){
boxplot(formula = unlist(pima[index])  ~ pima$class,
col = "lightgray",
ylab = paste0("",colnames(pima[1]),
xlab= 'Class',
main = paste0('Boxplot showing the relationship between if the patient has diabieties and',colnames(pima[1]) )
)
}
for (index in 1:ncol(pima)){
boxplot(formula = unlist(pima[index])  ~ pima$class,
col = "lightgray",
ylab = paste0("",colnames(pima[1])),
xlab= 'Class',
main = paste0('Boxplot showing the relationship between if the patient has diabieties and',colnames(pima[1]) )
)
}
for (index in 1:ncol(pima)){
boxplot(formula = unlist(pima[index])  ~ pima$class,
col = index,
ylab = paste0("",colnames(pima[1])),
xlab= 'Class',
main = paste0('Boxplot showing the relationship between if the patient has diabieties and',colnames(pima[1]) )
)
}
for (index in 1:ncol(pima)){
boxplot(formula = unlist(pima[index])  ~ pima$class,
col = index+1,
ylab = paste0("",colnames(pima[1])),
xlab= 'Class',
main = paste0('Boxplot showing the relationship between if the patient has diabieties and',colnames(pima[1]) )
)
}
for (index in 1:ncol(pima)){
boxplot(formula = unlist(pima[index])  ~ pima$class,
col = index+1,
ylab = paste0("",colnames(pima[1])),
xlab= 'Class',
main = paste0('Relationship between Diabetes and',colnames(pima[1]) )
)
}
for (index in 1:ncol(pima)){
boxplot(formula = unlist(pima[index])  ~ pima$class,
col = index+1,
ylab = paste0("",colnames(pima[1])),
xlab= 'Class',
main = paste0('Relationship between Diabetes and ',colnames(pima[1]) )
)
}
par(mfrow = c(2,4))
par(mfrow = c(2,4))
for (index in 1:ncol(pima)){
boxplot(formula = unlist(pima[index])  ~ pima$class,
col = index+1,
ylab = paste0("",colnames(pima[1])),
xlab= 'Class',
main = paste0('Relationship between diabetes and ',colnames(pima[1]) )
)
}
par(mfrow = c(4,2))
for (index in 1:ncol(pima)){
boxplot(formula = unlist(pima[index])  ~ pima$class,
col = index+1,
ylab = paste0("",colnames(pima[1])),
xlab= 'Class',
main = paste0('Relationship between diabetes and ',colnames(pima[1]) )
)
}
par(mfrow = c(2,2))
par(mfrow = c(2,2))
for (index in 1:ncol(pima)){
boxplot(formula = unlist(pima[index])  ~ pima$class,
col = index+1,
ylab = paste0("",colnames(pima[1])),
xlab= 'Class',
main = paste0('Relationship between diabetes and ',colnames(pima[1]) )
)
}
par(mfcol = c(2,2))
for (index in 1:ncol(pima)){
boxplot(formula = unlist(pima[index])  ~ pima$class,
col = index+1,
ylab = paste0("",colnames(pima[1])),
xlab= 'Class',
main = paste0('Relationship between diabetes and ',colnames(pima[1]) )
)
}
par(mfcol = c(4,2))
for (index in 1:ncol(pima)){
boxplot(formula = unlist(pima[index])  ~ pima$class,
col = index+1,
ylab = paste0("",colnames(pima[1])),
xlab= 'Class',
main = paste0('Relationship between diabetes and ',colnames(pima[1]) )
)
}
par(mfcol = c(2,4))
par(mfcol = c(2,4))
for (index in 1:ncol(pima)){
boxplot(formula = unlist(pima[index])  ~ pima$class,
col = index+1,
ylab = paste0("",colnames(pima[1])),
xlab= 'Class',
main = paste0('Relationship between diabetes and ',colnames(pima[1]) )
)
}
par(mfcol = c(2,3))
for (index in 1:ncol(pima)){
boxplot(formula = unlist(pima[index])  ~ pima$class,
col = index+1,
ylab = paste0("",colnames(pima[1])),
xlab= 'Class',
main = paste0('Relationship between diabetes and ',colnames(pima[1]) )
)
}
par(mfcol = c(2,2))
for (index in 1:ncol(pima)){
boxplot(formula = unlist(pima[index])  ~ pima$class,
col = index+1,
ylab = paste0("",colnames(pima[1])),
xlab= 'Class',
main = paste0('Relationship between diabetes and ',colnames(pima[1]) )
)
}
par(mfcol = c(2,2))
for (index in 1:ncol(pima)){
boxplot(formula = unlist(pima[index])  ~ pima$class,
col = index+1,
ylab = paste0("",colnames(pima[index])),
xlab= 'Class',
main = paste0('Relationship between diabetes and ',colnames(pima[index]) )
)
}
par(mfcol = c(2,2))
for (index in 1:ncol(pima)){
if colnames(pima[index] != 'class' ){
par(mfcol = c(2,2))
for (index in 1:ncol(pima)){
if (colnames(pima[index] != 'class'){
par(mfcol = c(2,2))
for (index in 1:ncol(pima)){
if (colnames(pima[index] != 'class'){
par(mfcol = c(2,2))
for (index in 1:ncol(pima)){
if (colnames(pima[index] != 'class')){
boxplot(formula = unlist(pima[index])  ~ pima$class,
col = index+1,
ylab = paste0("",colnames(pima[index])),
xlab= 'Class',
main = paste0('Relationship between diabetes and ',colnames(pima[index]) )
)
}
}
par(mfcol = c(2,2))
for (index in 1:ncol(pima)){
if (colnames(pima[index] != "class")){
boxplot(formula = unlist(pima[index])  ~ pima$class,
col = index+1,
ylab = paste0("",colnames(pima[index])),
xlab= 'Class',
main = paste0('Relationship between diabetes and ',colnames(pima[index]) )
)
}
}
par(mfcol = c(2,2))
for (index in 1:ncol(pima)){
if (colnames(pima[index] == "class")){
break
}else {  boxplot(formula = unlist(pima[index])  ~ pima$class,
col = index+1,
ylab = paste0("",colnames(pima[index])),
xlab= 'Class',
main = paste0('Relationship between diabetes and ',colnames(pima[index]) )
)}
}
print(colnames(pima[index])
par(mfcol = c(2,2))
par(mfcol = c(2,2))
for (index in 1:ncol(pima)){
if (colnames(pima[index]) == "class")){
par(mfcol = c(2,2))
for (index in 1:ncol(pima)){
if (colnames(pima[index]) == "class"){
break
}else {  boxplot(formula = unlist(pima[index])  ~ pima$class,
col = index+1,
ylab = paste0("",colnames(pima[index])),
xlab= 'Class',
main = paste0('Relationship between diabetes and ',colnames(pima[index]) )
)}
}
print(colnames(pima[index]))
dtrain <-  sort(sample(nrow(pima), nrow(pima)*.6), replace = FALSE)
dtrain <-  sort(sample(nrow(pima), nrow(pima)*.6, replace = FALSE))
train<-pima[dtrain,]
dval <- sort(sample(nrow(pima), nrow(pima)*.2, replace = FALSE))
val <- pima[dval,]
dtest <- sort(sample(nrow(pima), nrow(pima)*.2, replace = FALSE))
test<-data[dtest,]
knitr::opts_chunk$set(echo = TRUE)
library(corrplot)
library(ggplot2)
set.seed(1)
pima <- read.csv("~/Desktop/statistics-computing-R/datasets/pima.csv")
head(pima)
summary(pima)
pima_corr <- cor(pima,pima)
pima_corr
corrplot(pima_corr,method = 'circle',addCoef.col ='black', number.cex = 0.6)
ggplot(data=pima, mapping = aes(x = glc, y = age)) +
geom_point(aes(color = class,group = bmi, size = 2)) +
ggtitle("Plot showing relationship of GLC and age highlighed by if subject has diabetes.") +
xlab("Age(years)") + ylab("GLC")
par(mfcol = c(2,2))
for (index in 1:ncol(pima)){
if (colnames(pima[index]) == "class"){
break
}else {  boxplot(formula = unlist(pima[index])  ~ pima$class,
col = index+1,
ylab = paste0("",colnames(pima[index])),
xlab= 'Class',
main = paste0('Relationship between diabetes and ',colnames(pima[index]) )
)}
}
dtrain <-  sort(sample(nrow(pima), nrow(pima)*.6, replace = FALSE))
train<-pima[dtrain,]
dval <- sort(sample(nrow(pima), nrow(pima)*.2, replace = FALSE))
val <- pima[dval,]
dtest <- sort(sample(nrow(pima), nrow(pima)*.2, replace = FALSE))
test<-pima[dtest,]
knitr::opts_chunk$set(echo = TRUE)
install.packages("caTools")
library(caTools)
library(corrplot)
library(ggplot2)
set.seed(1)
logistic_model <- glm(class ~ glc, data = pima)
summary(logistic_model)
logistic_model <- glm(class ~ glc,
data = train,
family = 'binomial')
summary(logistic_model)
logistic_model <- glm(class ~ glc,
data = train,
family = 'binomial')
summary(logistic_model)
predict_ <- predict(logistic_model,
val, type = "response")
predict_
# Changing probabilities
predict_ <- ifelse(predict_ >0.5, 1, 0)
# Evaluating model accuracy
# using confusion matrix
table(test$vs, predict_)
# Evaluating model accuracy
# using confusion matrix
lenght(predict)
# Evaluating model accuracy
# using confusion matrix
len(predict)
# Evaluating model accuracy
# using confusion matrix
length(predict)
# Evaluating model accuracy
# using confusion matrix
predict
# Evaluating model accuracy
# using confusion matrix
nrows(predict_)
# Evaluating model accuracy
# using confusion matrix
nrow(predict_)
table(test, predict_)
missing_classerr <- mean(predict_ != test)
print(paste('Accuracy =', 1 - missing_classerr))
logistic_model <- glm(class ~ glc,
data = train,
family = 'binomial')
summary(logistic_model)
predict_ <- predict(logistic_model,
val, type = "response")
predict_
# Changing probabilities
predict_ <- ifelse(predict_ >0.5, 1, 0)
# Evaluating model accuracy
# using confusion matrix
table(test, predict_)
logistic_model <- glm(class ~ glc,
data = train,
family = 'binomial')
summary(logistic_model)
predict_ <- predict(logistic_model,
val, type = "response")
predict_
# Changing probabilities
predict_ <- ifelse(predict_ >0.5, 1, 0)
# Evaluating model accuracy
# using confusion matrix
table(val, predict_)
predict_ <- predict(logistic_model,
val['class'], type = "response")
predict_ <- predict(logistic_model,
val[], type = "response")
glc_class_val <- val %>% dplyr::select(glc, class)
library(tidyverse)
glc_class_val <- val %>% dplyr::select(glc, class)
logistic_model <- glm(class ~ glc,
data = train,
family = 'binomial')
summary(logistic_model)
predict_ <- predict(logistic_model,
val, type = "response")
predict_
# Changing probabilities
predict_ <- ifelse(predict_ >0.5, 1, 0)
predict_
# Evaluating model accuracy
# using confusion matrix
table(val, predict_)
ç <- val %>% dplyr::select(glc, class)
logistic_model <- glm(class ~ glc,
data = train,
family = 'binomial')
summary(logistic_model)
predict_ <- predict(logistic_model,
library(tidyverse), type = "response")
val_q4 <- val %>% dplyr::select(glc, class)
logistic_model <- glm(class ~ glc,
data = train,
family = 'binomial')
summary(logistic_model)
predict_ <- predict(logistic_model,
val_q4, type = "response")
predict_
# Changing probabilities
predict_ <- ifelse(predict_ >0.5, 1, 0)
predict_
# Evaluating model accuracy
# using confusion matrix
table(val_q4, predict_)
table(val_q4['class'], predict_)
# Evaluating model accuracy
# using confusion matrix
val_q4['class']
# Evaluating model accuracy
# using confusion matrix
print(val_q4['class'])
print(predict_)
# Evaluating model accuracy
# using confusion matrix
print(unlist(val_q4['class']))
table(unlist(val_q4['class']), predict_)
missing_classerr <- mean(predict_ != val_q4)
print(paste('Accuracy =', 1 - missing_classerr))
print(val_q4)
print(predict_)
print(val_q4)
table(unlist(val_q4['class']), predict_)
mean(predict_!=val_q4['class'])
print(paste0('Accuracy',1-misclassification))
misclassification <- mean(predict_!=val_q4['class'])
print(paste0('Accuracy',1-misclassification))
val_q4 <- val %>% dplyr::select(glc, class)
logistic_model <- glm(class ~ glc,
data = train,
family = 'binomial')
summary(logistic_model)
predict_ <- predict(logistic_model,
val_q4, type = "response")
predict_
# Changing probabilities
predict_ <- ifelse(predict_ >0.5, 1, 0)
print(predict_)
print(val_q4)
# Evaluating model accuracy
# using confusion matrix
table(unlist(val_q4['class']), predict_)
misclassification <- mean(predict_!=val_q4['class'])
print(paste0('Accuracy on Validation Set: ',1-misclassification))
caret::confusionMatrix(unlist(val_q4['class']), predict_)
tidy::confusionMatrix(unlist(val_q4['class']), predict_)
tidyr::confusionMatrix(unlist(val_q4['class']), predict_)
tidyr::confusionMatrix(unlist(val_q4['class']), predict_)
library(caret)
install.packages('caret')
knitr::opts_chunk$set(echo = TRUE)
install.packages("caTools")
install.packages('caret')
knitr::opts_chunk$set(echo = TRUE)
install.packages("caTools")
install.packages('caret')
library(tidyverse)
library(caTools)
library(corrplot)
library(ggplot2)
set.seed(1)
pima <- read.csv("~/Desktop/statistics-computing-R/datasets/pima.csv")
head(pima)
summary(pima)
pima_corr <- cor(pima,pima)
pima_corr
corrplot(pima_corr,method = 'circle',addCoef.col ='black', number.cex = 0.6)
ggplot(data=pima, mapping = aes(x = glc, y = age)) +
geom_point(aes(color = class,group = bmi, size = 2)) +
ggtitle("Plot showing relationship of GLC and age highlighed by if subject has diabetes.") +
xlab("Age(years)") + ylab("GLC")
par(mfcol = c(2,2))
for (index in 1:ncol(pima)){
if (colnames(pima[index]) == "class"){
break
}else {  boxplot(formula = unlist(pima[index])  ~ pima$class,
col = index+1,
ylab = paste0("",colnames(pima[index])),
xlab= 'Class',
main = paste0('Relationship between diabetes and ',colnames(pima[index]) )
)}
}
dtrain <-  sort(sample(nrow(pima), nrow(pima)*.6, replace = FALSE))
train<-pima[dtrain,]
dval <- sort(sample(nrow(pima), nrow(pima)*.2, replace = FALSE))
val <- pima[dval,]
dtest <- sort(sample(nrow(pima), nrow(pima)*.2, replace = FALSE))
test<-pima[dtest,]
val_q4 <- val %>% dplyr::select(glc, class)
logistic_model <- glm(class ~ glc,
data = train,
family = 'binomial')
summary(logistic_model)
confint(logistic_model)
predict_ <- predict(logistic_model,
val_q4, type = "response")
predict_
# Changing probabilities
predict_ <- ifelse(predict_ >0.5, 1, 0)
print(predict_)
print(val_q4)
# Evaluating model accuracy
# using confusion matrix
table(unlist(val_q4['class']), predict_)
library(caret)
tidyr::confusionMatrix(unlist(val_q4['class']), predict_)
confusionMatrix(unlist(val_q4['class']), predict_)
confusionMatrix(unlist(val_q4['class']), predict_)
confusionMatrix((val_q4['class']), predict_)
confusionMatrix(table(unlist(val_q4['class']), predict_))
val_q4 <- val %>% dplyr::select(glc, class)
logistic_model <- glm(class ~ glc,
data = train,
family = 'binomial')
summary(logistic_model)
confint(logistic_model)
predict_ <- predict(logistic_model,
val_q4, type = "response")
predict_
# Changing probabilities
predict_ <- ifelse(predict_ >0.5, 1, 0)
print(predict_)
print(val_q4)
# Evaluating model accuracy
# using confusion matrix
confusionMatrix(table(unlist(val_q4['class']), predict_))
misclassification <- mean(predict_!=val_q4['class'])
print(paste0('Accuracy on Validation Set: ',1-misclassification))
